// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metadata metadata
//
// swagger:model Metadata
type Metadata struct {

	// The the current page you are at.
	// Example: 2
	// Required: true
	CurrentPage *int64 `json:"currentPage"`

	// The total number of items available.
	// Example: 46
	// Required: true
	TotalItems *int64 `json:"totalItems"`

	// The total number of pages.
	// Example: 16
	// Required: true
	TotalPages *int64 `json:"totalPages"`
}

// Validate validates this metadata
func (m *Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metadata) validateCurrentPage(formats strfmt.Registry) error {

	if err := validate.Required("currentPage", "body", m.CurrentPage); err != nil {
		return err
	}

	return nil
}

func (m *Metadata) validateTotalItems(formats strfmt.Registry) error {

	if err := validate.Required("totalItems", "body", m.TotalItems); err != nil {
		return err
	}

	return nil
}

func (m *Metadata) validateTotalPages(formats strfmt.Registry) error {

	if err := validate.Required("totalPages", "body", m.TotalPages); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this metadata based on context it is used
func (m *Metadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metadata) UnmarshalBinary(b []byte) error {
	var res Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
