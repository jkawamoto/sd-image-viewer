// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image image
//
// swagger:model Image
type Image struct {

	// checkpoint
	Checkpoint string `json:"checkpoint,omitempty"`

	// creation time
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creation-time,omitempty"`

	// ID of the image file.
	// Required: true
	ID *string `json:"id"`

	// negative prompt
	NegativePrompt string `json:"negative-prompt,omitempty"`

	// pixel
	Pixel int64 `json:"pixel,omitempty"`

	// prompt
	Prompt string `json:"prompt,omitempty"`

	// image additional properties
	ImageAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *Image) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// checkpoint
		Checkpoint string `json:"checkpoint,omitempty"`

		// creation time
		// Format: date-time
		CreationTime strfmt.DateTime `json:"creation-time,omitempty"`

		// ID of the image file.
		// Required: true
		ID *string `json:"id"`

		// negative prompt
		NegativePrompt string `json:"negative-prompt,omitempty"`

		// pixel
		Pixel int64 `json:"pixel,omitempty"`

		// prompt
		Prompt string `json:"prompt,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv Image

	rcv.Checkpoint = stage1.Checkpoint
	rcv.CreationTime = stage1.CreationTime
	rcv.ID = stage1.ID
	rcv.NegativePrompt = stage1.NegativePrompt
	rcv.Pixel = stage1.Pixel
	rcv.Prompt = stage1.Prompt
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "checkpoint")
	delete(stage2, "creation-time")
	delete(stage2, "id")
	delete(stage2, "negative-prompt")
	delete(stage2, "pixel")
	delete(stage2, "prompt")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ImageAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m Image) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// checkpoint
		Checkpoint string `json:"checkpoint,omitempty"`

		// creation time
		// Format: date-time
		CreationTime strfmt.DateTime `json:"creation-time,omitempty"`

		// ID of the image file.
		// Required: true
		ID *string `json:"id"`

		// negative prompt
		NegativePrompt string `json:"negative-prompt,omitempty"`

		// pixel
		Pixel int64 `json:"pixel,omitempty"`

		// prompt
		Prompt string `json:"prompt,omitempty"`
	}

	stage1.Checkpoint = m.Checkpoint
	stage1.CreationTime = m.CreationTime
	stage1.ID = m.ID
	stage1.NegativePrompt = m.NegativePrompt
	stage1.Pixel = m.Pixel
	stage1.Prompt = m.Prompt

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ImageAdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ImageAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creation-time", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image based on context it is used
func (m *Image) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
