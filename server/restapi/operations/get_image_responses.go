// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/jkawamoto/sd-image-viewer/server/models"
)

// GetImageOKCode is the HTTP code returned for type GetImageOK
const GetImageOKCode int = 200

/*
GetImageOK Requested image file.

swagger:response getImageOK
*/
type GetImageOK struct {
	/*

	 */
	CacheControl string `json:"Cache-Control"`
	/*

	 */
	LastModified string `json:"Last-Modified"`

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewGetImageOK creates GetImageOK with default headers values
func NewGetImageOK() *GetImageOK {

	return &GetImageOK{}
}

// WithCacheControl adds the cacheControl to the get image o k response
func (o *GetImageOK) WithCacheControl(cacheControl string) *GetImageOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get image o k response
func (o *GetImageOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithLastModified adds the lastModified to the get image o k response
func (o *GetImageOK) WithLastModified(lastModified string) *GetImageOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get image o k response
func (o *GetImageOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get image o k response
func (o *GetImageOK) WithPayload(payload io.ReadCloser) *GetImageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image o k response
func (o *GetImageOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetImageNotModifiedCode is the HTTP code returned for type GetImageNotModified
const GetImageNotModifiedCode int = 304

/*
GetImageNotModified Requested image is not modified.

swagger:response getImageNotModified
*/
type GetImageNotModified struct {
}

// NewGetImageNotModified creates GetImageNotModified with default headers values
func NewGetImageNotModified() *GetImageNotModified {

	return &GetImageNotModified{}
}

// WriteResponse to the client
func (o *GetImageNotModified) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(304)
}

/*
GetImageDefault Error Response

swagger:response getImageDefault
*/
type GetImageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.StandardError `json:"body,omitempty"`
}

// NewGetImageDefault creates GetImageDefault with default headers values
func NewGetImageDefault(code int) *GetImageDefault {
	if code <= 0 {
		code = 500
	}

	return &GetImageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get image default response
func (o *GetImageDefault) WithStatusCode(code int) *GetImageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get image default response
func (o *GetImageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get image default response
func (o *GetImageDefault) WithPayload(payload *models.StandardError) *GetImageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get image default response
func (o *GetImageDefault) SetPayload(payload *models.StandardError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetImageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
